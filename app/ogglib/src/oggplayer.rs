/* automatically generated by rust-bindgen 0.61.0 */

pub const OGG_ONE_TIME: u32 = 0;
pub const OGG_INFINITE_TIME: u32 = 1;
pub const OGG_STATUS_RUNNING: u32 = 1;
pub const OGG_STATUS_ERR: i32 = -1;
pub const OGG_STATUS_PAUSED: u32 = 2;
pub const OGG_STATUS_EOF: u32 = 255;
extern "C" {
    #[doc = " PlayOgg"]
    #[doc = ""]
    #[doc = " Creates a thread that starts playing from the specific Ogg buffer"]
    #[doc = " buffer - pointer to the start of the Ogg data"]
    #[doc = " len - length of Ogg file"]
    #[doc = " time_pos - initial time position at which to start playback"]
    #[doc = " mode - playback mode (OGG_ONE_TIME or OGG_INFINITE_TIME)"]
    #[doc = " returns: -1 on error, 0 on success"]
    pub fn PlayOgg(
        buffer: *const ::libc::c_void,
        len: ::libc::c_int,
        time_pos: ::libc::c_int,
        mode: ::libc::c_int,
    ) -> ::libc::c_int;
}
extern "C" {
    #[doc = " StopOgg"]
    #[doc = ""]
    #[doc = " Stops playback. The player thread is shut down."]
    pub fn StopOgg();
}
extern "C" {
    #[doc = " PauseOgg"]
    #[doc = ""]
    #[doc = " Pauses playback. 0 -> continue, 1-> pause"]
    pub fn PauseOgg(pause: ::libc::c_int);
}
extern "C" {
    #[doc = " StatusOgg"]
    #[doc = ""]
    #[doc = " Returns the Ogg player's status"]
    #[doc = " returns:"]
    #[doc = " OGG_STATUS_RUNNING"]
    #[doc = " OGG_STATUS_ERR    -> not initialized"]
    #[doc = " OGG_STATUS_PAUSED"]
    #[doc = " OGG_STATUS_EOF    -> player stopped by End Of File"]
    pub fn StatusOgg() -> ::libc::c_int;
}
extern "C" {
    #[doc = " SetVolumeOgg"]
    #[doc = ""]
    #[doc = " Sets the Ogg playback volume (0 to 255 (max))"]
    pub fn SetVolumeOgg(volume: ::libc::c_int);
}
extern "C" {
    #[doc = " GetTimeOgg"]
    #[doc = ""]
    #[doc = " Gets current Ogg position"]
    #[doc = " returns -1 on error, or the time in milliseconds from the start"]
    pub fn GetTimeOgg() -> ::libc::c_int;
}
extern "C" {
    #[doc = " SetTimeOgg"]
    #[doc = ""]
    #[doc = " Sets the time position"]
    #[doc = " time_pos: time position (in milliseconds) to advance"]
    pub fn SetTimeOgg(time_pos: ::libc::c_int);
}
